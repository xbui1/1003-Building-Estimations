// The CameraVideoPageController is a class that controls the camera 
// video page.  This class provides a some useful methods you will
// need to call:
//     cameraVideoPage.displayMessage(message, timeout):
//         Causes a short message string to be displayed on the
//         page for a brief period.  Useful for showing quick
//         notifications to the user.  message is a plain string.
//         timeout is option and denotes the length of time in msec
//         to show the message for.
//     cameraVideoPage.setHeadsUpDisplayHTML(html):
//         This will set or update the heads-up-display with the
//         text given in the html argument.  Usually this should 
//         just be a string with text and line breaks (<br />).

// Initialise the camera video page and callback to our 
// cameraVideoPageInitialised() function when ready.
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);

var cameraHeight, /*baseAngle = 50, apexAngle =  100*/ heightOfUser = 1.8, distance, height, looper = 0
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);
//Loop entire program indefinitely

//while (looper = 1)
 //   {
        //Receive sensor input
        
        //Receive user Input
// You may need to create variables to store state.
window.addEventListener("deviceorientation", function(event) {
    var alpha = event.alpha;
    var beta = event.beta;
    var gamma = event.gamma;
    cameraVideoPage.setHeadsUpDisplayHTML("beta: " + beta)}, true);

//function handleOrientation(event)
//{
//    var alpha = event.alpha
//    var beta = [event.beta]
//    var gamma = event.gamma
//    return beta
//    
//}

cameraVideoPage.setHeadsUpDisplayHTML("beta:" + beta + "<br/>")

        //Check possible angles, Calculate if correct
        if (0 < baseAngle && baseAngle < 180)
            {
                if (0 < apexAngle && apexAngle < 180)
                    {    
                        if (apexAngle > baseAngle)
                            {
                                distance = calculateDistanceToObject(baseAngle, heightOfUser);
                                height = heightOfObject(distance, heightOfUser, apexAngle);
                            }
                    }
            }
        
        //Throw up errors if angles are wrong
        if (baseAngle < 0 || 180 < baseAngle)
            {
                cameraVideoPage.displayMessage("Base angle must be inbetween 0째 and 180째", 3);
            }
        if (apexAngle < 0 || 180 < apexAngle)
            {
                cameraVideoPage.displayMessage("Apex angle must be inbetween 0째 and 180째", 3);
            }
        if (apexAngle < baseAngle)
            {
                cameraVideoPage.displayMessage("Building apex must be higher than base- consider reversing", 3);
            }
        
        //Check calculations and display if correct
        if (distance > 0)
            {
                cameraVideoPage.setHeadsUpDisplayHTML("Distance: " + distance + "</br>" + "Height: " + height);
            }
        else
            {
                cameraVideoPage.displayMessage("Distance < 0, please check and reenter inputs", 5);
            }
//    }
 
//Function to calculate distance from object
function calculateDistanceToObject(beta, heightOfUser)
{
    angleToBase = beta * (Math.PI / 180) //Assuming that device screen up is 0 degrees, that's what my phone says atleast
    distance = heightOfUser * Math.tan(angleToBase) // trig
    return distance 
}

//function to determine the height of the object
function heightOfObject(distance, heightOfUser, beta)
{
    angleToApex = (Math.PI / 180) * (90 - beta) //minus 90 from beta value as 90 degrees is when phone is vertical, draw triangle to confirm angle is correct
    heightObjectPartial = Math.tan(angleToApex) * distance // trig
    heightOfObject = heightObjectPartial + heightOfUser // partial height plus height of user gives height of object
    return heightOfObject
}

// This function is called by a button to set the height of phone from the
// ground, in metres.
function setCameraHeightValue()
{
    // Step 3: Set camera height
    // check if input is a number and is positive
    // display on screen using the displayMessage method
}
    
// This function is called by a button to set the angle to the base of
// the object being measured.  It uses the current smoothed tilt angle.
function setBaseTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}

// This function is called by a button to set the angle to the apex of
// the object being measured.  It uses the current smoothed tilt angle.
function setApexTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
}
function cameraVideoPageInitialised(HTML)
{
    cameraVideoPage.setHeadsUpDisplayHTML(HTML);
    // Step 1: Check for and intialise deviceMotion
}
